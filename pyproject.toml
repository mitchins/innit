[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "innit-detector"
version = "1.1.0"
description = "Fast English vs Non-English text detection (ONNX or Tinygrad backends)"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Mitchell Currie", email = "mitchell@example.com"},
]
keywords = [
    "language-detection", 
    "english", 
    "nlp", 
    "machine-learning", 
    "onnx", 
    "text-classification",
    "byte-level",
    "multilingual"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
dependencies = [
    "numpy>=1.21.0",
    "tinygrad>=0.11.0",
    "safetensors>=0.4.3",
]

[project.optional-dependencies]
onnx = [
    "onnxruntime>=1.15.0",
]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0", 
    "vulture>=2.7",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-env>=1.1.3",
    "ruff>=0.1.0",
]

[project.urls]
"Homepage" = "https://github.com/Mitchins/innit-language-detection"
"Model" = "https://huggingface.co/Mitchins/innit-language-detection"
"Bug Reports" = "https://github.com/Mitchins/innit-language-detection/issues"
"Repository" = "https://github.com/Mitchins/innit-language-detection"

[project.scripts]
innit = "innit.detector:main"

[tool.setuptools]
packages = ["innit"]

[tool.black]
line-length = 100
target-version = ['py310']

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501"]  # handled by Black and style prefs
exclude = [
    ".git",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    "__pycache__",
    ".pytest_cache",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=innit"
testpaths = ["tests"]
env = [
  "PYTHONPATH=.",
]

[tool.coverage.run]
source = ["innit"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
